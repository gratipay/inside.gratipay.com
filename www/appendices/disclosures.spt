# -*- coding: utf-8 -*-
from __future__ import absolute_import, division, print_function, unicode_literals

import os
from collections import OrderedDict
from decimal import Decimal as D
from os.path import dirname, join

import requests


nav_title = 'Security Disclosures'
nav_children = []

try:
    hackerone_auth = (os.environ['HACKERONE_USERNAME'], os.environ['HACKERONE_PASSWORD'])
except KeyError:
    hackerone_auth = None


def pages():
    url = 'https://api.hackerone.com/v1/reports'
    session = requests.Session()
    session.auth = hackerone_auth
    response = session.get( url
                          , data={ 'filter[program][]': 'gratipay'
                                 , 'page[size]': '100'
                                 , 'disclosed_at__null': 'false'
                                 , 'sort': '-reports.disclosed_at'
                                  }
                           )
    while response and response.status_code == 200:
        data = response.json()
        yield data
        next_url = data.get('links', {}).get('next', '')
        if next_url:
            response = session.get(url)
        else:
            response = None


def formatted(reports):
    cur = ['9999', '99', '99']
    for report in reports:

        ts = []
        year, month, day = report['attributes']['disclosed_at'][:10].split('-')
        new = [year, month, day]
        if year != cur[0]:
            ts.append(year)
        if month != cur[1]:
            ts.append(month)
        if day != cur[2]:
            ts.append(day)
        cur = new

        map(int, new + [report['id']])  # quick validation, will fail with ValueError if invalid

        ts_mute = '-'.join(cur[:-len(ts)] if ts else cur)
        if ts_mute and ts:
            ts_mute += '-'
        ts_pop = '-'.join(ts)

        url = 'https://hackerone.com/reports/{id}'.format(**report)
        title = report['attributes']['title']
        yield ts_mute, ts_pop, url, title


[---]
N = 0
groups = OrderedDict([ ('',         ['Unclear',     0, []])
                     , ('critical', ['Severe',      0, []])
                     , ('high',     ['Moderate',    0, []])
                     , ('medium',   ['Mild',        0, []])
                     , ('low',      ['Theoretical', 0, []])
                     , ('none',     ['No',          0, []])
                      ])

for page in pages():
    for report in page.get('data', []):
        severity = report.get('relationships', {}) \
                         .get('severity', {}) \
                         .get('data', {}) \
                         .get('attributes', {}) \
                         .get('rating', '').lower()
        group = groups[severity]
        N += 1

        disclosed_at = report.get('attributes', {}).get('disclosed_at', '')
        link = 'https://hackerone.com/reports/{id}'.format(**report['attributes'])
        if not disclosed_at:
            report['title'] = link
        group[1] += 1
        group[2].append(report)

nav_title += ' (N={})'.format(N)

[---] text/html
<style>
    h2 {
        margin: 24px 0 0;
    }
    .reports {
        table-layout: fixed;
        width: 100%;
        margin: 0;
    }
    .reports td {
        padding-bottom: 5px;
        vertical-align: top;
        white-space: nowrap;
    }
    .reports td.ts {
        text-align: left;
        font-family: monospace;
        width: 110px;
    }
    .reports td.ts .mute {
        opacity: 0.2;
    }
    .reports td.ts .pop {
        opacity: 1;
    }
    .reports td.link {
        text-overflow: ellipsis;
        overflow: hidden ! important;
    }
</style>

*These are all the vulnerability reports we've disclosed through [our HackerOne
program](https://gratipay.com/about/security/hall-of-fame). We disclosed
another fourteen under [our old
program](https://gratipay.com/about/security/hall-of-fame). We currently have
{{ n }} unresolved security issues.*

{% for header, nundisclosed, reports in groups.values() %}
## {{ header }} Risk (disclosed = {{ len(reports) }})
{% if not group %}

None yet.{% else %}<table class="reports">
    {% for ts_mute, ts_pop, url, title in formatted(reports) %}
    <tr>
        <td class="ts">
            <span class="mute">{{ ts_mute }}</span><span class="pop">{{ ts_pop }}</span>
        </td>
        <td class="link"><a href="{{ url }}">{{ title|escape }}</a></td>
    </tr>
    {% endfor %}
</table>
{% endif %}
{% endfor %}
